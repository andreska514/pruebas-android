package com.andres.sun4all;

//https://github.com/sephiroth74/ImageViewZoom
import java.io.IOException;


import android.util.FloatMath;
import android.util.Log;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.graphics.PointF;
import android.graphics.RectF;
import android.support.v7.app.ActionBarActivity;
import android.os.Bundle;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.Toast;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.widget.TextView;
import android.view.View.OnClickListener;

public class Imagen {

	//probando
	int maxW;
	int maxH;
	
	//Matrix para el zoom
	static Matrix matrix = new Matrix();
	Matrix savedMatrix = new Matrix();
	
	// 3 posibles estados
	static final int NONE = 0;
	static final int PULSADO = 1;
	static final int ZOOM = 2;
	
	// cosas para el zoom
	PointF start = new PointF();
	PointF mid = new PointF();
	float oldDist = 1f;
	
	int mode = NONE;
	
	static ImageView imageView;
	float[]valores;
	
	Imagen(ImageView imView)//Constructor
	{
		// 0 4 zoom actual x y de la imagen(tama√±o si lo multiplicas por width/height)
		// 2 5 posiciones x y del matrix (muy raro)
		maxW=imView.getWidth();
		maxH=imView.getHeight();
		imView.setImageResource(R.drawable.sol);
		//imView.setScaleType(ScaleType.CENTER_CROP); <-- si lo pones desactiva el zoom
		//centra la imagen en la pantalla(el zoom se queda a 0.9f aprox(por que no es eso 1? :/)
		imView.setCropToPadding(true);
		
		imageView = imView;
		
	}
	
    public boolean touch(View v, MotionEvent event)
    {
    	imageView =(ImageView) v;
    	//tocando.... ------------------------------------------------------------------------
		imageView.setScaleType(ScaleType.MATRIX);
		//---------------------------------------------------------------------------------------------------
	    // Handle touch events here...
		compruebaValores();
	    switch (event.getAction() & MotionEvent.ACTION_MASK) {
		    //pulsar 1	    
		    case MotionEvent.ACTION_DOWN:
		    	
		        savedMatrix.set(matrix);
		        start.set(event.getX(), event.getY());
		        Log.d("accion", "mode=PULSADO");
		        mode = PULSADO;
		        break;
		    //pulsar 2
		    case MotionEvent.ACTION_POINTER_DOWN:
		        oldDist = espacio(event);
		        Log.d("accion", "oldDist=" + oldDist);
		        if (oldDist > 10f) {
		            savedMatrix.set(matrix);
		            puntoMedio(mid, event);
		            mode = ZOOM;
		            //Log.d("accion", "mode=ZOOM");
		        }
		        break;
	//soltar
		    case MotionEvent.ACTION_UP:
		    case MotionEvent.ACTION_POINTER_UP:
		        mode = NONE;
		        //Log.d("accion", "mode=NONE");
		        break;
	//mover
		    case MotionEvent.ACTION_MOVE:

		    	//compruebaValores();
		
		        if (mode == PULSADO) {
		            matrix.set(savedMatrix);
		            matrix.postTranslate(event.getX() - start.x, 
		            		event.getY() - start.y);
		        } 
		        else if (mode == ZOOM) {
		            float newDist = espacio(event);
	                matrix.set(savedMatrix);
	                float scale = newDist / oldDist;
	                matrix.postScale(scale, scale, mid.x, mid.y);  
	
		        }
		        break;
	    }//fin switch

	    imageView.setImageMatrix(matrix);
	    //logMatrix(matrix, imageView);
	    return true;
    }//fin touch
    //tocando --------------------------------------------------------------------------------------------
    private void compruebaValores(){
    	//Comprobacion valores minimos y maximos
    	valores = new float[9];
    	matrix.getValues(valores);
    	//si zoom <= permitido
        if (valores[0]<=0.9f){
        	valores[0]=0.9f;
        	valores[4]=0.9f;
        	valores[2]=0;
        	valores[5]=0;
        	matrix.setValues(valores);
        }
        if (valores[0]>0.9 && valores[0]<=1){
        	if(valores[2]>0){
        		valores[2]=0;
        		matrix.setValues(valores);
        	}
        	if(valores[2]<-86){
        		valores[2]=-86;
        		matrix.setValues(valores);
        	}
        	if(valores[2]>0){
        		valores[2]=0;
        		matrix.setValues(valores);
        	}
        	if(valores[2]>0){
        		valores[2]=0;
        		matrix.setValues(valores);
        	}
        }
        if (valores[0]>1 && valores[0]<=1.1){
        	
        }
        if (valores[0]>1.1 && valores[0]<=1.2){
        	
        }
        if (valores[0]>1.2 && valores[0]<=1.3){
        	
        }
        if (valores[0]>1.3 && valores[0]<=1.4){
        	
        }
        if (valores[0]>1.4 && valores[0]<=1.5){
        	
        }
        if (valores[0]>1.5 && valores[0]<=1.6){
        	
        }
        if (valores[0]>1.6 && valores[0]<=1.7){
        	
        }
        //si zoom > permitido
        if (valores[0]>1.7f){
        	valores[0]=1.7f;
        	valores[4]=1.7f;
        	matrix.setValues(valores);
        }
        
        
    }//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    
    /** Determina el espacio entre los 2 primeros dedos*/
	private float espacio(MotionEvent event) {
	    float x = event.getX(0) - event.getX(1);
	    float y = event.getY(0) - event.getY(1);
	    return FloatMath.sqrt(x * x + y * y);
	}
	/** Calcula el punto medio entre los 2 dedos*/
	private void puntoMedio(PointF point, MotionEvent event) {
	    float x = event.getX(0) + event.getX(1);
	    float y = event.getY(0) + event.getY(1);
	    point.set(x / 2, y / 2);
	}
	//logs rapidos, de quita y pon
	private void log(String s){
		Log.i("",s);
	}
    
    static void logMatrix(Matrix matrix, ImageView imageView){
		float[] values = new float[9];
		Main.contador++;
		matrix.getValues(values);
		Log.i("  ",Main.contador+"-----------veces---------------- ");
		Log.i("valores",""+values[0]+"/"+values[1]+"/"
		+values[2]+"/"+values[3]+"/"+values[4]+"/"
		+values[5]+"/"+values[6]+"/"
		+values[7]+"/"+values[8]);
		
		float globalX = values[2];
        float globalY = values[5];
        float width = values[0]* imageView.getWidth();
        float height = values[4] * imageView.getHeight();

        Log.i("globalX[2]",""+values[2]);
        Log.i("globalY[5]",""+values[5]);
        Log.i("width[0]",""+width+"("+values[0]+" x "+imageView.getWidth()+")");
        Log.i("height[4]",""+height+"("+values[4]+" x "+imageView.getHeight()+")");
	}

}
