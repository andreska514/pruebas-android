package com.andres.sun4all;

//https://github.com/sephiroth74/ImageViewZoom
import java.io.IOException;

import android.app.Activity;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.Matrix;
import android.graphics.PointF;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore.Images;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.ImageView;
import android.widget.Toast;

public class Imagen {

	// These matrices will be used to move and zoom image
	Matrix matrix = new Matrix();
	Matrix savedMatrix = new Matrix();//creo q es la imagen base
	
	private static final float MIN_ZOOM = 1.0f;
	private static final float MAX_ZOOM = 3f;

	// We can be in one of these 3 states
	static final int NONE = 0;
	static final int PULSADO = 1;
	static final int ZOOM = 2;
	int mode = NONE;

	// Remember some things for zooming
	PointF start = new PointF();
	PointF mid = new PointF();
	float oldDist = 1f;
	String savedItemClicked;
	
	private ImageView img;
	
	Imagen()//Constructor
	{
		img = (ImageView) findViewById(R.id.ImgFoto);
		img.setImageResource(R.drawable.sol);
		
		img.setOnTouchListener(handlerMover);
	}
	
	private void logMatrix(Matrix matrix, ImageView imageView){
		float[] values = new float[9];
		matrix.getValues(values);
		float globalX = values[2];
        float globalY = values[5];
        float width = values[0]* imageView.getWidth();
        float height = values[4] * imageView.getHeight();

        Log.i("Log value", "x: " + globalX 
        		+ " y: " + globalY + "width: " + width 
        		+ " height: " + height);
	}
	private float getXValueFromMatrix(Matrix matrix) {

        float[] values = new float[9];
           matrix.getValues(values);
           float globalX = values[2];

           return globalX;
    }
	private float getYValueFromMatrix(Matrix matrix) {

        float[] values = new float[9];
           matrix.getValues(values);
           float globalY = values[5];

           return globalY;
    }
	private float getWidthFromMatrix(Matrix matrix, ImageView imageview) {
        float[] values = new float[9];
           matrix.getValues(values);

           float width = values[0]* imageview.getWidth();

           return width;
    }
    private float getHeightFromMatrix(Matrix matrix, ImageView imageview) {

        float[] values = new float[9];
           matrix.getValues(values);

           float height = values[4] * imageview.getHeight();

           return height;
    }
    public boolean touch(View v, MotionEvent event){
    	//Log.i("pantalla", String.valueOf(event.getX())+" - "+String.valueOf(event.getY()));
	    ImageView view = (ImageView) v;
	    dumpEvent(event);

	    // Handle touch events here...
	    switch (event.getAction() & MotionEvent.ACTION_MASK) {
	    case MotionEvent.ACTION_DOWN:
	        savedMatrix.set(matrix);
	        start.set(event.getX(), event.getY());
	        Log.d("accion", "mode=PULSADO");
	        mode = PULSADO;
	        break;
	    case MotionEvent.ACTION_POINTER_DOWN:
	    	//Log.i("accion","ACTION_POINTER_DOWN");
	        oldDist = spacing(event);
	        Log.d("accion", "oldDist=" + oldDist);
	        if (oldDist > 10f) {
	            savedMatrix.set(matrix);
	            midPoint(mid, event);
	            mode = ZOOM;
	            Log.d("accion", "mode=ZOOM");
	        }
	        break;
	    case MotionEvent.ACTION_UP:
	    case MotionEvent.ACTION_POINTER_UP:
	    	Log.i("accion","ACTION_UP"+mode);
	        mode = NONE;
	        Log.d("accion", "mode=NONE");
	        break;
	    case MotionEvent.ACTION_MOVE:
	    	//Log.i("accion","ACTION_MOVE");
	        if (mode == PULSADO) {
	            Log.i("mode","drag");
	            matrix.set(savedMatrix);
	            matrix.postTranslate(event.getX() - start.x, event.getY()
	                    - start.y);
	        } else if (mode == ZOOM) {
	        	Log.i("mode","zoom");
	            float newDist = spacing(event);
	            //Log.d(TAG, "newDist=" + newDist);
	            if (newDist > 10f) {
	                matrix.set(savedMatrix);
	                float scale = newDist / oldDist;
	                //scale = Math.max(MIN_ZOOM, Math.min(scale, MAX_ZOOM));
	                matrix.postScale(scale, scale, mid.x, mid.y);
	            }
	        }
	        break;
	    }

	    view.setImageMatrix(matrix);
	    logMatrix(matrix, view);
	    return true;
    }

}
