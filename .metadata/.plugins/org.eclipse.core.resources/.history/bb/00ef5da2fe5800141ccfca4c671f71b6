package com.andres.sun4all;

import java.io.InputStream;
import java.net.URL;
import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.Drawable;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.ImageView;
import android.widget.ProgressBar;


public class Descargar extends AsyncTask<String, Void, Void> 
{
	Drawable imgLoad;
	ProgressBar progressbar;
	
	@Override
	protected void onPreExecute() {
		// TODO Auto-generated method stub
		super.onPreExecute();
		progressbar.setVisibility(View.VISIBLE);
	}
	@Override
	protected Void doInBackground(String... params) {
		// TODO Auto-generated method stub
		imgLoad = LoadImageFromWeb(params[0]);
		return null;
	}
	@Override
	protected void onPostExecute(Void result) {
		// TODO Auto-generated method stub
		super.onPostExecute(result);
		if(progressbar.isShown())
		{
			progressbar.setVisibility(View.GONE);
			imgLogo.setVisibility(View.VISIBLE);
			imgLogo.setBackgroundDrawable(imgLoad);
		}
	}

}


//AsyckTask to download image (url given )
/*private class Descargar extends AsyncTask<String, Void, Bitmap>{
	ImageView bmImage;

	  //constructor
	  public Descargar(ImageView bmImage) {
	      this.bmImage = bmImage;
	  }

	  // laoding picture and put it into bitmap 
	  protected Bitmap doInBackground(String... urls) {
	      String urldisplay = urls[0];
	      Bitmap mIcon11 = null;
	      try {
	        InputStream in = new java.net.URL(urldisplay).openStream();
	        mIcon11 = BitmapFactory.decodeStream(in);
	      } catch (Exception e) {
	          Log.e("Error", e.getMessage());
	          e.printStackTrace();
	      }
	      return mIcon11;
	  }

	  //after downloading
	  protected void onPostExecute(Bitmap result) {
	      bmImage.setImageBitmap(result);
	  }
}*/

/*public class Descargar extends AsyncTask<String, void, void> 
{
	Drawable imgLoad;
	ProgressBar progressbar;
	
	@Override
	protected void onPreExecute() {
		// TODO Auto-generated method stub
		super.onPreExecute();
		progressbar.setVisibility(View.VISIBLE);
	}
	@Override
	protected Void doInBackground(String... params) {
		// TODO Auto-generated method stub
		imgLoad = LoadImageFromWeb(params[0]);
		return null;
	}
	@Override
	protected void onPostExecute(Void result) {
		// TODO Auto-generated method stub
		super.onPostExecute(result);
		if(progressbar.isShown())
		{
			progressbar.setVisibility(View.GONE);
			imgLogo.setVisibility(View.VISIBLE);
			imgLogo.setBackgroundDrawable(imgLoad);
		}
	}
	//Constructor
	void Descargar(String link){

	}
	Bitmap getBitmap(){
		return bitmap;
	}

}*/
/*Bitmap bitmap;
URL url;
String link;*/

/*void Descargar(String link){
	try{
		this.link = link;
		url = new URL(link);
		InputStream in = url.openStream();
		BufferedOutputStream  out = new BufferedOutputStream
				(new FileOutputStream("testImage.png"));
		int i;
		while((i=in.read())!= -1){
			out.write(i);
		}
		out.close();
		in.close();
		
		BufferedInputStream buf = new BufferedInputStream(in);
		bitmap = BitmapFactory.decodeStream(buf);
		//image.setImageBitmap(bitmap);
		if (in != null) {
	        in.close();
        }
        if (buf != null) {
        	buf.close();
        }
	}catch (Exception e){
		Log.e("Error reading file", e.toString());
	}
	
}*/